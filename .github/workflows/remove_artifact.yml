name: Delete Artifacts by Date and Repo

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'The repository (owner/repo) whose artifacts you want to delete'
        required: true
        type: string
      target_date:
        description: 'Delete artifacts created on this date (YYYY-MM-DD)'
        required: true
        type: string

permissions:
  contents: write

env:
  # Must be a PAT (or token) that has repo:actions permission on the target repository
  TARGET_REPO_PAT: ${{ secrets.PAT_TOKEN }}

jobs:
  delete_artifacts:
    name: Delete Artifacts on ${{ github.event.inputs.target_date }} from ${{ github.event.inputs.target_repo }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq if missing
        shell: bash
        run: |
          if ! command -v jq &> /dev/null; then
            echo "Installing jq…"
            apt-get update -qy
            apt-get install -qy jq
          fi

      - name: Validate inputs
        shell: bash
        run: |
          REPO="${{ github.event.inputs.target_repo }}"
          DATE="${{ github.event.inputs.target_date }}"
          if [[ -z "$REPO" ]]; then
            echo "Error: target_repo is required."
            exit 1
          fi
          if [[ ! "$REPO" =~ ^[^/]+/[^/]+$ ]]; then
            echo "Error: target_repo must be in 'owner/repo' format."
            exit 1
          fi
          if [[ -z "$DATE" ]]; then
            echo "Error: target_date is required."
            exit 1
          fi
          if [[ ! "$DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "Error: target_date must be YYYY-MM-DD."
            exit 1
          fi
          echo "Inputs validated: REPO=$REPO, DATE=$DATE"

      - name: List & Delete artifacts for the given date (with pagination)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TARGET_DATE: ${{ github.event.inputs.target_date }}
        run: |
          echo "Deleting artifacts from $TARGET_REPO created on $TARGET_DATE …"

          PAGE=1
          ALL_DELETED=0

          while true; do
            echo "Fetching page $PAGE of artifacts…"
            RESPONSE=$(curl -s \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$TARGET_REPO/actions/artifacts?per_page=100&page=$PAGE")

            # Check for “Not Found” or other API errors
            MESSAGE=$(echo "$RESPONSE" | jq -r '.message // empty')
            if [[ "$MESSAGE" == "Not Found" ]]; then
              echo "Error: Repository '$TARGET_REPO' not found or insufficient permissions."
              exit 1
            fi
            if [[ -n "$MESSAGE" && "$MESSAGE" != "null" ]]; then
              echo "Error: Unexpected API message: $MESSAGE"
              exit 1
            fi

            # Extract artifacts array (could be empty)
            ARTIFACTS=$(echo "$RESPONSE" | jq -r '.artifacts // []')

            # If no artifacts on this page, stop
            if [[ $(echo "$ARTIFACTS" | jq 'length') -eq 0 ]]; then
              echo "No more artifacts on page $PAGE; exiting loop."
              break
            fi

            # From this page, pick only those created_at starting with TARGET_DATE
            IDS_TO_DELETE=$(echo "$ARTIFACTS" | jq -r --arg TD "$TARGET_DATE" '
              .[]
              | select(.created_at | startswith($TD))
              | .id
            ')

            if [[ -z "$IDS_TO_DELETE" ]]; then
              echo "No artifacts on page $PAGE match date $TARGET_DATE."
            else
              echo "Found these artifact IDs on page $PAGE for $TARGET_DATE:"
              echo "$IDS_TO_DELETE"
              echo "$IDS_TO_DELETE" | while read -r ID; do
                echo "→ Deleting artifact ID $ID"
                curl -s -X DELETE \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/$TARGET_REPO/actions/artifacts/$ID"
                ALL_DELETED=1
              done
            fi

            # If fewer than 100 artifacts returned, we know there is no next page
            COUNT_ON_PAGE=$(echo "$ARTIFACTS" | jq 'length')
            if [[ $COUNT_ON_PAGE -lt 100 ]]; then
              echo "Fewer than 100 artifacts on page $PAGE ($COUNT_ON_PAGE), so this was the last page."
              break
            fi

            PAGE=$((PAGE + 1))
          done

          if [[ $ALL_DELETED -eq 0 ]]; then
            echo "No artifacts matching $TARGET_DATE were found across all pages."
          else
            echo "Finished deleting all artifacts from date $TARGET_DATE."
          fi

